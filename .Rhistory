colnames(outliers.mat)[1]<-"ID"
extremes<- subset(outliers.mat,as.numeric(outliers.mat[,2])>critical.value)
extremes[,2] <-rep(1, dim(extremes)[1])
extremes<- dplyr::select(extremes,c('ID','m.dist'))
outliers.mat<- merge(outliers.mat, extremes, by="ID", all.x=TRUE)
colnames(outliers.mat)[2]<-"d"
outliers.mat[,2]<-as.numeric( outliers.mat[,2])
cut.off.lower<-critical.value
cut.off.upper<-critical.value
title1<-paste(title,"OUTLIERS_MAHAL_METHOD_chisq level",n,sep=' ')
plot.outliers(outliers.mat, title1)
}
##### outputting the outliers found
# If a univariate method was used:
if(method=="sd" | method=="IQR" | method=="grubbs"| method=="PCT"){
date<- Sys.Date()
if(is.null(dim(outliers.data))==FALSE){
# filename<-paste(trial.name, "_OUTLIERS_", method, "_" , date, ".txt", sep="")
# write.table(outliers.data, filename, sep="\t", col.names=FALSE, row.names=FALSE)
knitr::kable(outliers.data, row.names = FALSE,caption = "","simple")
}
}
# if a multivariate method was used:
if(method=="euclid" | method=="mahal"){
date<- Sys.Date()
outliers.mat<-outliers.mat[,c(1,4)]
output<- merge(data, outliers.mat, by="ID")
output<-subset(output, is.na(output[,dim(output)[2]])==FALSE)
output<- output[,- dim(output)[2]]
if(dim(output)[1]>0){
if(method=="euclid"){
means<- c("Means", "", means, "")	## add in the means if Euclid was used
output<- rbind(output, means)
}
#filename<-paste("OUTLIERS_", method, "_" , date, ".txt", sep="")
#write.table(output, filename, sep="\t", row.names=FALSE)
knitr::kable(output, row.names = FALSE,caption = "","simple")
}
}
##### outputting normal probability plots for each variable (if requested)
if(normal.plot==TRUE){
i<-3
while(i<=dim(data)[2]){
varname<- names(data)[i]
title1<-paste(title,"NORMAL_PROB_PLOT", varname,sep=' ')
win.metafile(title1)
qqnorm(data[,i], ylab="Standardized Residuals", xlab="Normal Scores", main=names(data)[i])
qqline(data[,i])
i<- i + 1
}
}
##### outputting info on the number of variables and values checked
number.values<-0
i<-3
while(i<=dim(data)[2]){
number.values<- number.values + dim(subset(data, is.na(data[,i])==FALSE))[1]
i<- i + 1
}
checknames<-c("Number of variables:", "Number of participants:", "Number of values", "Number of outliers")
if(method=="sd" | method=="IQR" | method=="grubbs"| method=="PCT"){
if(is.null(dim(outliers.data))==FALSE) numberoutliers<-dim(outliers.data)[1]-1
if(is.null(dim(outliers.data))==TRUE) numberoutliers<-"None"
}
if(method=="euclid"| method=="mahal") {
if(dim(output)[1]==0) numberoutliers<- "none"
if(dim(output)[1]>0) numberoutliers<-dim(output)[1]
}
check<-c(dim(data)[2]-2, dim(data)[1], number.values, numberoutliers)
checked<-cbind(checknames, check)
filename<-paste(title1,"OUTLIERS_VARIABLESCHECKED_", method)
knitr::kable(checked, caption = "","simple",row.names = FALSE)
}
outlier_aedata<-  function(data0,data1,n, method,var.name='AE_Rate',title='')
{
colnames(data0)[1]<-'SITEID'
colnames(data0)[2]<-'SUBJID'
colnames(data1)[1]<-'SITEID'
colnames(data1)[2]<-'SUBJID'
colnames(data1)[3]<-'EXSTDTC'
colnames(data1)[4]<-'LASTDTC'
options(dplyr.summarise.inform = FALSE)
data1$AEOTT<-as.Date(data1$LASTDTC,format="%m/%d/%Y")-as.Date(data1$EXSTDTC,format="%m/%d/%Y")+1
data2<-data0 %>%
group_by(SITEID,SUBJID) %>%
summarise(PT_TEAE_Incidence_Rate = n())
data3<-merge(data1,data2,all.x=TRUE,by=c('SITEID','SUBJID'))
data4<-data3 %>%
group_by(SITEID) %>%
summarise(n1=sum(PT_TEAE_Incidence_Rate,na.rm = TRUE),n2=sum(AEOTT,na.rm = TRUE))  %>%
mutate(varname = 30.4375*n1 /as.numeric(n2),SITEID2=1) #incidence per person month#
data<-data.frame(dplyr::select(data4,c(SITEID,SITEID2,varname)))
data$varname<-as.numeric(data$varname)
data$SITEID<-as.character (data$SITEID)
colnames(data)[length(data)] <- var.name
outlier_check(data, n = n, method = method,  normal.plot = FALSE,title)
}
outlier_aedata(data0,data1,n=.95, method='PCT',var.name='AE_Rate',title='')
View(AE_outlier0)
View(AE_outlier1)
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='PCT',var.name='AE_Rate',title='')
library(dplyr)
outlier_aedata<-  function(data0,data1,n, method,var.name='AE_Rate',title='')
{
colnames(data0)[1]<-'SITEID'
colnames(data0)[2]<-'SUBJID'
colnames(data1)[1]<-'SITEID'
colnames(data1)[2]<-'SUBJID'
colnames(data1)[3]<-'EXSTDTC'
colnames(data1)[4]<-'LASTDTC'
options(dplyr.summarise.inform = FALSE)
data1$AEOTT<-as.Date(data1$LASTDTC,format="%m/%d/%Y")-as.Date(data1$EXSTDTC,format="%m/%d/%Y")+1
data2<-data0 %>%
group_by(SITEID,SUBJID) %>%
summarise(PT_TEAE_Incidence_Rate = n())
data3<-merge(data1,data2,all.x=TRUE,by=c('SITEID','SUBJID'))
data4<-data3 %>%
group_by(SITEID) %>%
summarise(n1=sum(PT_TEAE_Incidence_Rate,na.rm = TRUE),n2=sum(AEOTT,na.rm = TRUE))  %>%
mutate(varname = 30.4375*n1 /as.numeric(n2),SITEID2=1) #incidence per person month#
data<-data.frame(dplyr::select(data4,c(SITEID,SITEID2,varname)))
data$varname<-as.numeric(data$varname)
data$SITEID<-as.character (data$SITEID)
colnames(data)[length(data)] <- var.name
outlier_check(data, n = n, method = method,  normal.plot = FALSE,title)
}
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='PCT',var.name='AE_Rate',title='')
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='sd',var.name='AE_Rate',title='')
#Test case 7.2
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='mahal',var.name='AE_Rate',title='')
#Test case 7.3
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='IQR',var.name='AE_Rate',title='')
#Test case 7.1
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='sd',var.name='AE_Rate',title='')
#Test case 7.3
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='IQR',var.name='AE_Rate',title='')
#Test case 7.1
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='sd',var.name='AE_Rate',title='')
#Test case 7.4
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='PCT',var.name='AE_Rate',title='')
View(AE_outlier0)
View(AE_outlier1)
data_a<-AE_outlier1
data_a$aedur<-as.Date(data_a$STDTC)-as.Date(data_a$LASTDTC)
as.Date(data_a$STDTC)
data_a<-AE_outlier1
data_a$aedur<-as.Date(data_a$STDTC, "%m/%d/%y")-as.Date(data_a$LASTDTC,"%m/%d/%y")
data_a$aedur<-as.Date(data_a$STDTC, "%Y-%m-%d", tz="EST5EDT")-as.Date(data_a$LASTDTC, "%Y-%m-%d", tz="EST5EDT")
data_a$aedur
data_a$aedur
as.Date(data_a$STDTC, "%Y-%m-%d", tz="EST5EDT")
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
## Sys.setlocale("LC_TIME", lct)
z
#Section 2.1: define AE durations#
data_a<-AE_outlier1
data_a$aedur<-difftime(as.Date(data_a$LASTDTC, "%Y-%m-%d", tz="EST5EDT"), as.Date(data_a$STDTC, "%Y-%m-%d", tz="EST5EDT"), units="months")
data_a$aedur<-difftime(as.Date(data_a$LASTDTC, "%Y-%m-%d", tz="EST5EDT"), as.Date(data_a$STDTC, "%Y-%m-%d", tz="EST5EDT"), units="days")
data_a
data_a$aedur
as.Date(data_a$LASTDTC, "%Y-%m-%d", tz="EST5EDT")
as.Date(data_a$LASTDTC, "%Y-%m-%d", tz="EST5EDT")
as.Date(data_a$LASTDTC, "%m-%d-%Y", tz="EST5EDT")
as.Date(data_a$LASTDTC, "%m-%d-%Y", tz="EST5EDT")
as.Date(data_a$STDTC, "%Y-%m-%d", tz="EST5EDT")
data_a$LASTDTC
as.Date(data_a$LASTDTC, "%Y-%m-%d", tz="EST5EDT")
as.Date(data_a$LASTDTC, "%m/%d/%Y", tz="EST5EDT")
data_a$aedur<-difftime(as.Date(data_a$STDTC, "%Y-%m-%d", tz="EST5EDT"), as.Date(data_a$LASTDTC, "%m/%d/%Y", tz="EST5EDT"), units="days")
data_a$aedur
#Section 2.1: define AE durations#
data_a<-AE_outlier1
data_a$aedur<-difftime(as.Date(data_a$LASTDTC, "%m/%d/%Y", tz="EST5EDT"), as.Date(data_a$STDTC, "%Y-%m-%d", tz="EST5EDT"), units="days")
data_a$aedur
data_a$aedur<-difftime(as.Date(data_a$LASTDTC, "%m/%d/%Y", tz="EST5EDT"), as.Date(data_a$STDTC, "%Y-%m-%d", tz="EST5EDT"), units="days")/30.4375
data_a$aedur
data_a
tapply(data_a$aedur, as.factor(data_a$SITEID), sum)
tapply(data_b$AEPT, as.factor(data_b$SITEID), length)
data_b<-AE_outlier0
tapply(data_b$AEPT, as.factor(data_b$SITEID), length)
tapply(data_b$AEPT, as.factor(data_b$SITEID), sum)
tapply(data_b$SUBJID, as.factor(data_b$SITEID), length)
AE_Rates<-num/deno
data_a$aedur
nume<-tapply(data_a$aedur, as.factor(data_a$SITEID), sum)
data_b<-AE_outlier0
deno<-tapply(data_b$SUBJID, as.factor(data_b$SITEID), length)
AE_Rates<-nume/deno
AE_Rates
deno<-tapply(data_a$aedur, as.factor(data_a$SITEID), sum)
data_b<-AE_outlier0
nume<-tapply(data_b$SUBJID, as.factor(data_b$SITEID), length)
AE_Rates<-nume/deno
AE_Rates
data_a$SITEID
data_c<-data.frame()
data_c$SITEID<-colnames(AE_Rates)
data_c<-NULL
data_c$SITEID<-colnames(AE_Rates)
data_c<-NULL
data_c$SITEID<-names(AE_Rates)
data_c
data_c<-NULL
data_c$SITEID<-names(AE_Rates)
data_c$AE_Rates<-AE_Rates
data_c
data_c<-NULL
data_c$SITEID<-names(AE_Rates)
data_c$AE_Rates<-as.vector(AE_Rates)
data_c
#Section 2.2.1: SD
N<-0.95
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p",
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=max(data_c$AE_Rates)+1,
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
max(data_c$AE_Rates)
max(data_c$AE_Rates)+5
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+1),
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
N<-0.95
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+10),
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
N<-0.95
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+100),
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
N<-0.95
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+1),
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
N<-0.95
mean_AE_Rates<-mean(data_c$AE_Rates)
SD_AE_Rates<-sd(data_c$AE_Rates)
N<-0.95
mean_AE_Rates<-mean(data_c$AE_Rates)
SD_AE_Rates<-sd(data_c$AE_Rates)
lower.limit<-mean_AE_Rates-N*SD_AE_Rates
upper.limit<-mean_AE_Rates-N*SD_AE_Rates
lower.limit
upper.limit
#Section 2.2.1: SD
N<-0.95
mean_AE_Rates<-mean(data_c$AE_Rates)
SD_AE_Rates<-sd(data_c$AE_Rates)
lower.limit<-mean_AE_Rates-N*SD_AE_Rates
upper.limit<-mean_AE_Rates+N*SD_AE_Rates
lower.limit
upper.limit
N<-0.95
mean_AE_Rates<-mean(data_c$AE_Rates)
SD_AE_Rates<-sd(data_c$AE_Rates)
lower.limit<-round(mean_AE_Rates-N*SD_AE_Rates, 2)
upper.limit<-round(mean_AE_Rates+N*SD_AE_Rates, 2)
lower.limit
upper.limit
abline(h=c(lower.limit, upper.limit), lty=2, col=2)
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+1),
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
abline(h=lower.limit, lty=2, col=2)
abline(h=upper.limit, lty=2, col=2)
ata_c$AE_Rates>upper.limit
data_c$AE_Rates>upper.limit
mean_AE_Rates<-mean(data_c$AE_Rates)
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+1),
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
abline(h=lower.limit, lty=2, col=2)
abline(h=upper.limit, lty=2, col=2)
points(which(data_c$AE_Rates>upper.limit), data_c$AE_Rates[which(data_c$AE_Rates>upper.limit)], pch=19, col=2)
points(which(data_c$AE_Rates<lower.limit), data_c$AE_Rates[which(data_c$AE_Rates<lower.limit)], pch=19, col=2)
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+1),
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
abline(h=lower.limit, lty=2, col=2)
axis(2, at=lower.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
abline(h=upper.limit, lty=2, col=2)
axis(2, at=upper.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
points(which(data_c$AE_Rates>upper.limit), data_c$AE_Rates[which(data_c$AE_Rates>upper.limit)], pch=19, col=2)
points(which(data_c$AE_Rates<lower.limit), data_c$AE_Rates[which(data_c$AE_Rates<lower.limit)], pch=19, col=2)
par()
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+1),
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
abline(h=lower.limit, lty=2, col=2)
axis(2, at=lower.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
abline(h=upper.limit, lty=2, col=2)
axis(2, at=upper.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
points(which(data_c$AE_Rates>upper.limit), data_c$AE_Rates[which(data_c$AE_Rates>upper.limit)], pch=19, col=2)
points(which(data_c$AE_Rates<lower.limit), data_c$AE_Rates[which(data_c$AE_Rates<lower.limit)], pch=19, col=2)
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+1),
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
abline(h=lower.limit, lty=2, col=2)
axis(2, at=lower.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
abline(h=upper.limit, lty=2, col=2)
axis(2, at=upper.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
points(which(data_c$AE_Rates>upper.limit), data_c$AE_Rates[which(data_c$AE_Rates>upper.limit)], pch=19, col=2)
points(which(data_c$AE_Rates<lower.limit), data_c$AE_Rates[which(data_c$AE_Rates<lower.limit)], pch=19, col=2)
par(mfrow = c(1, 1))
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+1),
main="Outliers: SD Method", sub=paste("Outliers:", N, "SD;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
abline(h=lower.limit, lty=2, col=2)
axis(2, at=lower.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
abline(h=upper.limit, lty=2, col=2)
axis(2, at=upper.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
points(which(data_c$AE_Rates>upper.limit), data_c$AE_Rates[which(data_c$AE_Rates>upper.limit)], pch=19, col=2)
points(which(data_c$AE_Rates<lower.limit), data_c$AE_Rates[which(data_c$AE_Rates<lower.limit)], pch=19, col=2)
#Test case 7.1
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='sd',var.name='AE_Rate',title='')
colnames(data_c)
as.data.frame(data_c)
data_c
data_c<-as.data.frame(data_c)
colnames(data_c)
#print the table#
numeric_var<-NULL
for(k in 1:length(colnames(data_c))){
numeric_var[k]<-is.numeric(data_c[, colnames(data_c)[k]])
}
length(numeric_var[numeric_var==TRUE]) # Number of (numeric) variables#
is.numeric(data_c[, colnames(data_c)[1]])
is.numeric(data_c[, colnames(data_c)[2]])
which(data_c$AE_Rates>upper.limit)
data_c$AE_Rates>upper.limit
which(data_c$AE_Rates<lower.limit)
data_c$AE_Rates>upper.limit
is.TRUE(data_c$AE_Rates>upper.limit)
is.na(data_c$AE_Rates>upper.limit)
(data_c$AE_Rates>upper.limit)[data_c$AE_Rates>upper.limit==TRUE]
data_c$AE_Rates>upper.limit
data_c$AE_Rates>upper.limit==TRUE
data_c$AE_Rates>upper.limit
(data_c$AE_Rates>upper.limit)[data_c$AE_Rates>upper.limit]
length((data_c$AE_Rates>upper.limit)[data_c$AE_Rates>upper.limit])
num.outlier<-length((data_c$AE_Rates>upper.limit)[data_c$AE_Rates>upper.limit])+length((data_c$AE_Rates<lower.limit)[data_c$AE_Rates<lower.limit])
num.outlier
table_res<-rbind(paste("Number of (numeric) variables:", length(numeric_var[numeric_var==TRUE])),
paste("Number of Participants:", length(data_c$SITEID)),
paste("Number of Values:", length(data_c$AE_Rates)),
paste("Number of outliers found:", num.outlier))
colnames(table_res)<-"Table: Information"
rownames(table_res)<-rep("", nrow(table_res))
print(table_res)
#Test case 7.3
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='IQR',var.name='AE_Rate',title='')
sort(data_c$AE_Rates)
N<-0.95
mean_AE_Rates<-mean(data_c$AE_Rates)
Q3_AE_Rates<-quantile(sort(data_c$AE_Rates), probs = 0.75)
Q1_AE_Rates<-quantile(sort(data_c$AE_Rates), probs = 0.25)
lower.limit<-round(N*Q3_AE_Rates, 2)
upper.limit<-round(N*Q1_AE_Rates, 2)
lower.limit
upper.limit
#Section 2.2.2: IQR
N<-0.95
mean_AE_Rates<-mean(data_c$AE_Rates)
Q3_AE_Rates<-quantile(sort(data_c$AE_Rates), probs = 0.75)
Q1_AE_Rates<-quantile(sort(data_c$AE_Rates), probs = 0.25)
lower.limit<-round(mean_AE_Rates-N*(Q3_AE_Rates-Q1_AE_Rates), 2)
upper.limit<-round(mean_AE_Rates+N*(Q3_AE_Rates-Q1_AE_Rates), 2)
lower.limit
upper.limit
Q3_AE_Rates-Q1_AE_Rates
mean_AE_Rates
#Section 2.2.2: IQR
N<-0.95
median_AE_Rates<-median(data_c$AE_Rates)
median
median(data_c$AE_Rates)
N<-0.95
median_AE_Rates<-median(data_c$AE_Rates)
median_AE_Rates
#Section 2.2.2: IQR
N<-0.95
median_AE_Rates<-median(data_c$AE_Rates)
Q3_AE_Rates<-quantile(sort(data_c$AE_Rates), probs = 0.75)
Q1_AE_Rates<-quantile(sort(data_c$AE_Rates), probs = 0.25)
lower.limit<-round(median_AE_Rates-N*(Q3_AE_Rates-Q1_AE_Rates), 2)
upper.limit<-round(median_AE_Rates+N*(Q3_AE_Rates-Q1_AE_Rates), 2)
lower.limit
upper.limit
#Section 2.2.2: IQR
N<-0.95
median_AE_Rates<-median(data_c$AE_Rates)
Q3_AE_Rates<-quantile(sort(data_c$AE_Rates), probs = 0.75)
Q1_AE_Rates<-quantile(sort(data_c$AE_Rates), probs = 0.25)
lower.limit<-round(median_AE_Rates-N*(Q3_AE_Rates-Q1_AE_Rates), 2)
upper.limit<-round(median_AE_Rates+N*(Q3_AE_Rates-Q1_AE_Rates), 2)
#Here, it should be Q1-N*IQR and Q3+N*IQR to define outliers!
lower.limit
upper.limit
#Section 2.2.2: IQR
N<-0.95
median_AE_Rates<-median(data_c$AE_Rates)
Q3_AE_Rates<-quantile(sort(data_c$AE_Rates), probs = 0.75)
Q1_AE_Rates<-quantile(sort(data_c$AE_Rates), probs = 0.25)
lower.limit<-round(Q1_AE_Rates-N*(Q3_AE_Rates-Q1_AE_Rates), 2)
upper.limit<-round(Q3_AE_Rates+N*(Q3_AE_Rates-Q1_AE_Rates), 2)
#Here, it should be Q1-N*IQR and Q3+N*IQR to define outliers!
lower.limit
upper.limit
#print the plot#
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+1),
main="Outliers: IQR Method", sub=paste("Outliers: Q3+ or Q1-", N, "IQR;", "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
abline(h=lower.limit, lty=2, col=2)
axis(2, at=lower.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
abline(h=upper.limit, lty=2, col=2)
axis(2, at=upper.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
points(which(data_c$AE_Rates>upper.limit), data_c$AE_Rates[which(data_c$AE_Rates>upper.limit)], pch=19, col=2)
points(which(data_c$AE_Rates<lower.limit), data_c$AE_Rates[which(data_c$AE_Rates<lower.limit)], pch=19, col=2)
#print the table#
numeric_var<-NULL
for(k in 1:length(colnames(data_c))){
numeric_var[k]<-is.numeric(data_c[, colnames(data_c)[k]])
}
#length(numeric_var[numeric_var==TRUE]) # Number of (numeric) variables#
num.outlier<-length((data_c$AE_Rates>upper.limit)[data_c$AE_Rates>upper.limit])+length((data_c$AE_Rates<lower.limit)[data_c$AE_Rates<lower.limit])
table_res<-rbind(paste("Number of (numeric) variables:", length(numeric_var[numeric_var==TRUE])),
paste("Number of Participants:", length(data_c$SITEID)),
paste("Number of Values:", length(data_c$AE_Rates)),
paste("Number of outliers found:", num.outlier))
colnames(table_res)<-"Table: Information"
rownames(table_res)<-rep("", nrow(table_res))
print(table_res)
#Validation for IQR was not passed!#
#Section 2.2.1: SD
N<-0.95
mean_AE_Rates<-mean(data_c$AE_Rates)
SD_AE_Rates<-sd(data_c$AE_Rates)
lower.limit<-round(mean_AE_Rates-N*SD_AE_Rates, 2)
upper.limit<-round(mean_AE_Rates+N*SD_AE_Rates, 2)
upper.limit
lower.limit
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='mahal',var.name='AE_Rate',title='')
#Test case 7.4
outlier_aedata(AE_outlier0, AE_outlier1, n=.95, method='PCT',var.name='AE_Rate',title='')
lower.limit<-round(quantile(sort(data_c$AE_Rates), probs = 1 - N), 2)
upper.limit<-round(quantile(sort(data_c$AE_Rates), probs = N), 2)
#Here, it should be Q1-N*IQR and Q3+N*IQR to define outliers, instead of Median+/-N*IQR!
lower.limit
upper.limit
#Section 2.2.3: PCT
N<-0.95
lower.limit<-round(quantile(sort(data_c$AE_Rates), probs = 1 - N), 2)
upper.limit<-round(quantile(sort(data_c$AE_Rates), probs = N), 2)
#print the plot#
plot(1:length(data_c$SITEID), data_c$AE_Rates, xlab="Site ID", ylab="AE_Rates", type="p", ylim=c(0, max(data_c$AE_Rates)+1),
main="Outliers: PCT Method", sub=paste("Outliers: top and bottom", 1-N, "Red solid points are outliers."),
axes=FALSE, frame.plot=TRUE, panel.first = grid(length(data_c$SITEID), length(data_c$SITEID)))
axis(side=1, at=1:length(data_c$SITEID), labels=data_c$SITEID, outer=FALSE)
axis(side=2, outer=FALSE)
abline(h=lower.limit, lty=2, col=2)
axis(2, at=lower.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
abline(h=upper.limit, lty=2, col=2)
axis(2, at=upper.limit, tick=TRUE, lty = 1, col=1, label=TRUE)
points(which(data_c$AE_Rates>upper.limit), data_c$AE_Rates[which(data_c$AE_Rates>upper.limit)], pch=19, col=2)
points(which(data_c$AE_Rates<lower.limit), data_c$AE_Rates[which(data_c$AE_Rates<lower.limit)], pch=19, col=2)
#print the table#
numeric_var<-NULL
for(k in 1:length(colnames(data_c))){
numeric_var[k]<-is.numeric(data_c[, colnames(data_c)[k]])
}
#length(numeric_var[numeric_var==TRUE]) # Number of (numeric) variables#
num.outlier<-length((data_c$AE_Rates>upper.limit)[data_c$AE_Rates>upper.limit])+length((data_c$AE_Rates<lower.limit)[data_c$AE_Rates<lower.limit])
table_res<-rbind(paste("Number of (numeric) variables:", length(numeric_var[numeric_var==TRUE])),
paste("Number of Participants:", length(data_c$SITEID)),
paste("Number of Values:", length(data_c$AE_Rates)),
paste("Number of outliers found:", num.outlier))
colnames(table_res)<-"Table: Information"
rownames(table_res)<-rep("", nrow(table_res))
print(table_res)
#Validation for IQR was not passed, because the definitions of upper limit and lower limit are questionable!#
load("C:/Users/lyang/Overland Pharma/Clinical Development - CSM_r_package/csm_package/clincsmr/R/sysdata.rda")
View(Eff_outlier_inlier)
library(valtools)
library(devtools)
library(usethis)
devtools::install_github("r-lib/devtools")
